version: '3'

services:
  # База даних PostgreSQL
  db:
    image: postgres:15
    container_name: wireguard_db
    environment:
      POSTGRES_DB: wireguard_db
      POSTGRES_USER: wireguard_user
      POSTGRES_PASSWORD: wireguard_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - wireguard_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wireguard_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кешування
  redis:
    image: redis:7-alpine
    container_name: wireguard_redis
    networks:
      - wireguard_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Django веб-додаток
  web:
    build: 
      context: ./wg_portal
      dockerfile: Dockerfile
    container_name: wireguard_web
    environment:
      - DATABASE_URL=postgres://wireguard_user:wireguard_password_2024@db:5432/wireguard_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-very-secret-key-change-this-in-production-2024
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
    volumes:
      - ./wg_portal:/app
      - wireguard_configs:/app/wireguard_configs
      - ./logs:/app/logs
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wireguard_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WireGuard VPN сервер
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard_vpn
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Kiev
      - SERVERURL=auto
      - SERVERPORT=51820
      - PEERS=0
      - PEERDNS=1.1.1.1,8.8.8.8
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=0.0.0.0/0
      - LOG_CONFS=true
    volumes:
      - wireguard_configs:/config
      - /lib/modules:/lib/modules:ro
      - ./wireguard_scripts:/scripts:ro
    ports:
      - "51820:51820/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      wireguard_network:
        ipv4_address: 172.20.0.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wg", "show"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: wireguard_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_files:/app/staticfiles:ro
      - ./logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - wireguard_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  wireguard_configs:
    driver: local
  static_files:
    driver: local

networks:
  wireguard_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
