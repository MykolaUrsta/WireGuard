#!/bin/bash

# WireGuard Manager - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
# –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä—ñ–∑–Ω—ñ —Ä–µ–∂–∏–º–∏: –ø–æ–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞, —à–≤–∏–¥–∫–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

set -e

DOMAIN="wg-portal.itc.gov.ua"
EMAIL="admin@itc.gov.ua"
MODE="full"

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --deploy)
            MODE="deploy"
            shift
            ;;
        --update)
            MODE="update"
            shift
            ;;
        --domain)
            DOMAIN="$2"
            shift 2
            ;;
        --email)
            EMAIL="$2"
            shift 2
            ;;
        --no-sudo)
            NO_SUDO=true
            shift
            ;;
        -h|--help)
            echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [–û–ü–¶–Ü–á]"
            echo ""
            echo "–†–ï–ñ–ò–ú–ò:"
            echo "  (–±–µ–∑ –æ–ø—Ü—ñ–π)  –ü–æ–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑ –Ω—É–ª—è"
            echo "  --deploy     –®–≤–∏–¥–∫–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ"
            echo "  --update     –®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"
            echo ""
            echo "–û–ü–¶–Ü–á:"
            echo "  --domain     –î–æ–º–µ–Ω –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: wg-portal.itc.gov.ua)"
            echo "  --email      Email –¥–ª—è Let's Encrypt (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: admin@itc.gov.ua)"
            echo "  --no-sudo    –ó–∞–ø—É—Å–∫ –±–µ–∑ sudo (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏/—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)"
            echo "  -h, --help   –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
            echo ""
            echo "–ü–†–ò–ö–õ–ê–î–ò:"
            echo "  sudo $0                    # –ü–æ–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
            echo "  $0 --deploy --no-sudo      # –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –±–µ–∑ sudo"
            echo "  $0 --update --no-sudo      # –¢—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ sudo"
            exit 0
            ;;
        *)
            echo "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è: $1"
            echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ -h –∞–±–æ --help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏"
            exit 1
            ;;
    esac
done

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
case $MODE in
    "full")
        TITLE="üöÄ WireGuard Manager - –ü–æ–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑ –Ω—É–ª—è"
        ;;
    "deploy")
        TITLE="‚ö° WireGuard Manager - –®–≤–∏–¥–∫–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è"
        ;;
    "update")
        TITLE="üîÑ WireGuard Manager - –®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"
        ;;
esac

echo "$TITLE"
echo "================================================="
echo ""

if [ "$MODE" = "full" ]; then
    echo "–¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω–∞—î:"
    echo "‚úì –ü–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥"
    echo "‚úì –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker —Ç–∞ Docker Compose (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)"
    echo "‚úì –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π"
    echo "‚úì –ó–±—ñ—Ä–∫—É —Ç–∞ –∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "‚úì –û—Ç—Ä–∏–º–∞–Ω–Ω—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É –≤—ñ–¥ Let's Encrypt"
    echo "‚úì –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HTTP/3"
elif [ "$MODE" = "deploy" ]; then
    echo "–¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω–∞—î:"
    echo "‚úì –ü–µ—Ä–µ–≤—ñ—Ä–∫—É Docker"
    echo "‚úì –ó—É–ø–∏–Ω–∫—É —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "‚úì –ó–±—ñ—Ä–∫—É —Ç–∞ –∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "‚úì –û—Ç—Ä–∏–º–∞–Ω–Ω—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)"
elif [ "$MODE" = "update" ]; then
    echo "–¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω–∞—î:"
    echo "‚úì –®–≤–∏–¥–∫—É –∑–±—ñ—Ä–∫—É –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"
    echo "‚úì –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "‚úì –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤"
fi
echo ""

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ROOT –ø—Ä–∞–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ–≤–Ω–æ—ó —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
check_root() {
    if [ "$MODE" = "full" ] && [ "$EUID" -ne 0 ] && [ "$NO_SUDO" != "true" ]; then
        echo "‚ùå –ü–æ–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î ROOT –ø—Ä–∞–≤–∞. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∑ sudo –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ --no-sudo –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏"
        echo "   –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏: $0 --deploy --no-sudo"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker
install_docker() {
    echo "üê≥ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker..."
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤
    apt-get update
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
    apt-get install -y \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ GPG –∫–ª—é—á–∞ Docker
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é Docker
    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥—Ä—É–ø—É docker
    if [ "$SUDO_USER" ]; then
        usermod -aG docker $SUDO_USER
        echo "‚úì –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á $SUDO_USER –¥–æ–¥–∞–Ω–∏–π –≤ –≥—Ä—É–ø—É docker"
    fi
    
    # –ó–∞–ø—É—Å–∫ Docker
    systemctl start docker
    systemctl enable docker
    
    echo "‚úì Docker –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        if [ "$MODE" = "full" ] && [ "$NO_SUDO" != "true" ]; then
            echo "‚ö†Ô∏è  Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ..."
            install_docker
        else
            echo "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π."
            echo "   –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker: sudo apt install docker.io docker-compose-plugin"
            echo "   –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥—Ä—É–ø—É: sudo usermod -aG docker $USER"
            echo "   –ü–µ—Ä–µ–∑–∞–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ"
            exit 1
        fi
    else
        echo "‚úì Docker –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ Docker
    if ! docker ps &> /dev/null; then
        echo "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ Docker. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –≥—Ä—É–ø—ñ docker:"
        echo "   sudo usermod -aG docker $USER"
        echo "   –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–∑–∞–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É"
        exit 1
    fi
    
    if ! docker compose version &> /dev/null; then
        echo "‚ùå Docker Compose –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        echo "   –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: sudo apt install docker-compose-plugin"
        exit 1
    else
        echo "‚úì Docker Compose –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
create_directories() {
    echo "üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π..."
    
    mkdir -p logs
    mkdir -p ssl/certbot/conf
    mkdir -p ssl/certbot/www
    mkdir -p ssl/nginx
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø—Ä–∞–≤–∞)
    if [ "$NO_SUDO" != "true" ] && [ "$EUID" -eq 0 ]; then
        chmod 755 logs
        chmod 755 ssl
        chmod 755 ssl/certbot
        chmod 755 ssl/certbot/conf
        chmod 755 ssl/certbot/www
    fi
    
    echo "‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
stop_existing() {
    echo "üõë –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    
    if docker compose ps -q 2>/dev/null | grep -q .; then
        docker compose down
        echo "‚úì –Ü—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑—É–ø–∏–Ω–µ–Ω–æ"
    else
        echo "‚úì –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è —à–≤–∏–¥–∫–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
quick_update() {
    echo "üîÑ –®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º..."
    
    # –®–≤–∏–¥–∫–∞ –∑–±—ñ—Ä–∫–∞ –∑ –∫–µ—à–µ–º
    echo "   –ó–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ –æ–±—Ä–∞–∑–∏..."
    docker compose build
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    echo "   –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker compose up -d --remove-orphans
    
    echo "‚úì –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü—ñ—è –∑–±—ñ—Ä–∫–∏ —Ç–∞ –∑–∞–ø—É—Å–∫—É
build_and_start() {
    echo "üî® –ó–±—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    
    # –ó–±—ñ—Ä–∫–∞ –∑ –∫–µ—à–µ–º
    echo "   –ó–±–∏—Ä–∞—î–º–æ –æ–±—Ä–∞–∑–∏..."
    docker compose build --parallel
    
    # –ó–∞–ø—É—Å–∫
    echo "   –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker compose up -d
    
    echo "‚úì –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
setup_ssl() {
    if [ "$NO_SUDO" = "true" ]; then
        echo "üîê –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ SSL –≤ —Ä–µ–∂–∏–º—ñ --no-sudo (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)"
        return 0
    fi
    
    echo "üîê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –¥–æ–º–µ–Ω—É
    echo "   –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –¥–æ–º–µ–Ω—É $DOMAIN..."
    if ! curl -s -I http://$DOMAIN >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  –î–æ–º–µ–Ω $DOMAIN –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ SSL..."
        return 0
    fi
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
    echo "   –û—Ç—Ä–∏–º—É—î–º–æ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç..."
    docker run --rm \
        -v $(pwd)/ssl/certbot/conf:/etc/letsencrypt \
        -v $(pwd)/ssl/certbot/www:/var/www/certbot \
        certbot/certbot \
        certonly --webroot \
        --webroot-path=/var/www/certbot \
        --email $EMAIL \
        --agree-tos \
        --no-eff-email \
        -d $DOMAIN
    
    if [ $? -eq 0 ]; then
        echo "‚úì SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ"
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx –∑ SSL
        echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ nginx –∑ SSL..."
        docker compose restart nginx
        echo "‚úì Nginx –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –∑ SSL"
    else
        echo "‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
show_status() {
    echo ""
    echo "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:"
    echo "=================="
    
    sleep 3
    docker compose ps
    
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏:"
    echo "====================="
    echo "HTTP:  http://$DOMAIN"
    echo "HTTPS: https://$DOMAIN"
    echo ""
    echo "üë§ –î–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:"
    echo "=================="
    echo "–õ–æ–≥—ñ–Ω:    admin"
    echo "Email:    admin@example.com"
    echo "–ü–∞—Ä–æ–ª—å:   admin123"
    echo ""
    echo "üîß –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
    echo "==================="
    echo "–ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤:     docker compose logs -f"
    echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:         docker compose restart"
    echo "–ó—É–ø–∏–Ω–∫–∞:            docker compose down"
    if [ "$NO_SUDO" = "true" ]; then
        echo "–®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:   ./install.sh --update --no-sudo"
        echo "–®–≤–∏–¥–∫–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è: ./install.sh --deploy --no-sudo"
        echo "–ü–æ–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞:    ./install.sh --no-sudo"
    else
        echo "–®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:   ./install.sh --update"
        echo "–®–≤–∏–¥–∫–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è: ./install.sh --deploy"
        echo "–ü–æ–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞:    sudo ./install.sh"
    fi
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    if [ "$MODE" != "update" ]; then
        echo "–ü–æ—á–∫–∞—î–º–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏..."
        sleep 3
    fi
    
    check_root
    check_docker

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–º–∏–∫–∞—î–º–æ IP forwarding –¥–ª—è NAT (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø—Ä–∞–≤–∞)
    if [ "$NO_SUDO" != "true" ] && [ "$EUID" -eq 0 ]; then
        echo "üîß –í–º–∏–∫–∞—î–º–æ net.ipv4.ip_forward=1 –¥–ª—è NAT..."
        sysctl -w net.ipv4.ip_forward=1
        if ! grep -q '^net.ipv4.ip_forward=1' /etc/sysctl.conf; then
            echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
        fi
        echo "‚úì IP forwarding —É–≤—ñ–º–∫–Ω–µ–Ω–æ"
    else
        echo "‚ö†Ô∏è  –ù–µ root –∞–±–æ --no-sudo: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ip_forward (–Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –≤—Ä—É—á–Ω—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)"
    fi

    if [ "$MODE" = "update" ]; then
        # –†–µ–∂–∏–º —à–≤–∏–¥–∫–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        quick_update
        echo ""
        echo "üéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        echo "======================"
        return 0
    fi

    if [ "$MODE" = "full" ]; then
        create_directories
    fi

    stop_existing

    if [ "$MODE" = "update" ]; then
        quick_update
    else
        build_and_start
    fi

    echo ""
    echo "‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
    sleep 30

    if [ "$MODE" = "full" ]; then
        setup_ssl
    fi

    show_status

    echo ""
    echo "üéâ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "========================="
    echo ""
    echo "–°–∏—Å—Ç–µ–º–∞ WireGuard Manager –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!"
}

# –ó–∞–ø—É—Å–∫
main
